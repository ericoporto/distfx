// new module script


#define D_FORMAT_FIX  "%.6f"

float _d_c1;
float _d_c2;
float _d_c3;

managed struct DistCfg {
  int type;
  float ampl;
  float ampl_accel;
  float s_freq;
  float s_freq_accel;
  float compr;
  float compr_accel;
  float speed;
};

enum FX {
  eDistFX_Count = 135
};

DistCfg* _fx_rom[eDistFX_Count];

void _set_fx_rom(int index, int type, int t_ampl, int t_ampl_accel, int t_freq, int t_freq_accel, int t_compr, int t_compr_accel, int t_speed)
{
  DistCfg* fx = new DistCfg;
  fx.type = type;
  fx.ampl = IntToFloat(t_ampl);
  fx.ampl_accel = IntToFloat(t_ampl_accel);
  fx.s_freq = IntToFloat(t_freq);
  fx.s_freq_accel = IntToFloat(t_freq_accel);
  fx.compr = IntToFloat(t_compr);
  fx.compr_accel = IntToFloat(t_compr_accel);
  fx.speed = IntToFloat(t_speed);
  _fx_rom[index] = fx;
}

void game_start()
{
  // N.B. these values should be "short," and must have a specific precision.
  // this seems to effect backgrounds with distortEffect == 1
  String str_c1 = String.Format(D_FORMAT_FIX, (1.0 / 512.0));
  String str_c2 = String.Format(D_FORMAT_FIX, (8.0 * Maths.Pi / (1024.0 * 256.0)));
  String str_c3 = String.Format(D_FORMAT_FIX, (Maths.Pi / 60.0));
    
  _d_c1 = str_c1.AsFloat;
  _d_c2 = str_c2.AsFloat;
  _d_c3 = str_c3.AsFloat;
  
  _set_fx_rom(0, 0, 0, 0, 0, 0, 0, 0, 0);
  _set_fx_rom(1, 1, 2048, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(2, 1, 4096, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(3, 1, 8192, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(4, 1, 16384, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(5, 1, 2048, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(6, 1, 4096, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(7, 1, 8192, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(8, 1, 16384, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(9, 1, 2048, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(10, 1, 4096, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(11, 1, 8192, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(12, 1, 16384, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(13, 1, 2048, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(14, 1, 4096, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(15, 1, 8192, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(16, 1, 16384, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(17, 1, 32768, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(18, 1, 32768, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(19, 1, 65535, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(20, 2, 2048, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(21, 2, 4096, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(22, 2, 8192, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(23, 2, 16384, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(24, 2, 2048, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(25, 2, 4096, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(26, 2, 8192, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(27, 2, 16384, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(28, 2, 2048, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(29, 2, 4096, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(30, 2, 8192, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(31, 2, 16384, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(32, 2, 2048, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(33, 2, 4096, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(34, 2, 8192, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(35, 2, 16384, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(36, 2, 32768, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(37, 2, 32768, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(38, 2, 65535, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(39, 3, 2048, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(40, 3, 4096, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(41, 3, 8192, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(42, 3, 16384, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(43, 3, 2048, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(44, 3, 4096, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(45, 3, 8192, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(46, 3, 16384, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(47, 3, 2048, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(48, 3, 4096, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(49, 3, 8192, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(50, 3, 16384, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(51, 3, 2048, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(52, 3, 4096, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(53, 3, 8192, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(54, 3, 16384, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(55, 3, 32768, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(56, 3, 32768, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(57, 3, 65535, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(58, 4, 2048, 0, 1024, 0, 0, 0, 2); // f4
  _set_fx_rom(59, 4, 4096, 0, 1024, 0, 0, 0, 2); // f4
  _set_fx_rom(60, 4, 8192, 0, 1024, 0, 0, 0, 2); // f4
  _set_fx_rom(61, 4, 16384, 0, 1024, 0, 0, 0, 2); // f4
  _set_fx_rom(62, 4, 2048, 0, 768, 0, 0, 0, 2); // f4
  _set_fx_rom(63, 4, 4096, 0, 768, 0, 0, 0, 2); // f4
  _set_fx_rom(64, 4, 8192, 0, 768, 0, 0, 0, 2); // f4
  _set_fx_rom(65, 4, 16384, 0, 768, 0, 0, 0, 2); // f4
  _set_fx_rom(66, 4, 2048, 0, 512, 0, 0, 0, 2); // f4
  _set_fx_rom(67, 4, 4096, 0, 512, 0, 0, 0, 2); // f4
  _set_fx_rom(68, 4, 8192, 0, 512, 0, 0, 0, 2); // f4
  _set_fx_rom(69, 4, 16384, 0, 512, 0, 0, 0, 2); // f4
  _set_fx_rom(70, 4, 2048, 0, 256, 0, 0, 0, 2); // f4
  _set_fx_rom(71, 4, 4096, 0, 256, 0, 0, 0, 2); // f4
  _set_fx_rom(72, 4, 8192, 0, 256, 0, 0, 0, 2); // f4
  _set_fx_rom(73, 4, 16384, 0, 256, 0, 0, 0, 2); // f4
  _set_fx_rom(74, 4, 32768, 0, 1024, 0, 0, 0, 2); // f4
  _set_fx_rom(75, 4, 32768, 0, 512, 0, 0, 0, 2); // f4
  _set_fx_rom(76, 4, 65535, 0, 512, 0, 0, 0, 2); // f4
  _set_fx_rom(77, 4, 8192, 256, 512, 0, 0, 0, 10); // f4
  _set_fx_rom(78, 1, 8192, 256, 512, 0, 0, 0, 10);
  _set_fx_rom(79, 2, 8192, 256, 512, 0, 0, 0, 10);
  _set_fx_rom(80, 3, 8192, 256, 512, 0, 0, 0, 10);
  _set_fx_rom(81, 3, 0, 256, 512, 0, 0, 0, 0);
  _set_fx_rom(82, 3, 65280, 65280, 512, 0, 0, 0, 0);
  _set_fx_rom(83, 1, 0, 256, 512, 0, 0, 0, 0);
  _set_fx_rom(84, 1, 65280, 65280, 512, 0, 0, 0, 0);
  _set_fx_rom(85, 3, 32768, 0, 512, 0, 512, 0, 0);
  _set_fx_rom(86, 3, 32768, 0, 512, 0, 128, 0, 0);
  _set_fx_rom(87, 3, 16384, 0, 1024, 0, 256, 2, 0);
  _set_fx_rom(88, 3, 16384, 0, 1024, 0, 768, 65534, 0);
  _set_fx_rom(89, 1, 16384, 0, 2048, 65534, 0, 0, 1);
  _set_fx_rom(90, 1, 16384, 0, 0, 2, 0, 0, 255);
  _set_fx_rom(91, 3, 0, 0, 0, 0, 256, 3, 0);
  _set_fx_rom(92, 3, 0, 0, 0, 0, 2056, 65533, 0);
  _set_fx_rom(93, 3, 0, 0, 0, 0, 512, 65535, 0);
  _set_fx_rom(94, 3, 0, 0, 0, 0, 0, 1, 0);
  _set_fx_rom(95, 3, 0, 0, 0, 0, 736, 65534, 0);
  _set_fx_rom(96, 3, 0, 0, 0, 0, 0, 2, 0);
  _set_fx_rom(97, 1, 32768, 65436, 1024, 65534, 0, 0, 1);
  _set_fx_rom(98, 1, 8768, 100, 544, 2, 0, 0, 255);
  _set_fx_rom(99, 4, 16384, 0, 512, 2, 256, 2, 1); // f4
  _set_fx_rom(100, 4, 16384, 0, 1024, 65534, 768, 65534, 255); // f4
  _set_fx_rom(101, 1, 2048, 0, 128, 0, 0, 0, 0);
  _set_fx_rom(102, 1, 0, 128, 1024, 0, 0, 0, 0);
  _set_fx_rom(103, 1, 32768, 65408, 1024, 0, 0, 0, 0);
  _set_fx_rom(104, 1, 0, 128, 512, 0, 0, 0, 0);
  _set_fx_rom(105, 1, 64000, 65408, 512, 0, 0, 0, 0);
  _set_fx_rom(106, 1, 0, 80, 512, 0, 0, 0, 0);
  _set_fx_rom(107, 1, 40000, 65456, 512, 0, 0, 0, 0);
  _set_fx_rom(108, 3, 2048, 0, 512, 0, 0, 1, 0);
  _set_fx_rom(109, 3, 2048, 0, 512, 0, 61440, 65534, 0);
  _set_fx_rom(110, 1, 0, 0, 0, 0, 0, 0, 0);
  _set_fx_rom(111, 1, 0, 0, 0, 0, 0, 0, 0);
  _set_fx_rom(112, 1, 0, 128, 256, 0, 0, 0, 0);
  _set_fx_rom(113, 1, 0, 64, 256, 0, 0, 0, 0);
  _set_fx_rom(114, 2, 64128, 0, 4096, 0, 0, 0, 0);
  _set_fx_rom(115, 2, 4096, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(116, 1, 4096, 0, 512, 0, 0, 0, 2);
  _set_fx_rom(117, 3, 4096, 0, 224, 0, 0, 0, 2);
  _set_fx_rom(118, 3, 0, 128, 1024, 0, 0, 0, 0);
  _set_fx_rom(119, 3, 32768, 65408, 1024, 0, 0, 0, 0);
  _set_fx_rom(120, 3, 1024, 0, 512, 0, 256, 2, 0);
  _set_fx_rom(121, 3, 1024, 0, 512, 0, 1216, 65534, 0);
  _set_fx_rom(122, 3, 16384, 0, 768, 0, 0, 0, 2);
  _set_fx_rom(123, 3, 8192, 0, 1024, 0, 0, 0, 2);
  _set_fx_rom(124, 3, 0, 128, 1024, 0, 0, 0, 0);
  _set_fx_rom(125, 3, 32768, 65408, 1024, 0, 0, 0, 0);
  _set_fx_rom(126, 3, 0, 150, 1024, 0, 0, 0, 0);
  _set_fx_rom(127, 3, 38400, 65386, 1024, 0, 0, 0, 0);
  _set_fx_rom(128, 4, 0, 60, 256, 0, 0, 0, 2); // f4
  _set_fx_rom(129, 4, 21600, 65476, 256, 0, 0, 0, 2); // f4
  _set_fx_rom(130, 3, 1024, 0, 256, 0, 0, 0, 2);
  _set_fx_rom(131, 4, 0, 90, 256, 0, 0, 0, 2); // f4
  _set_fx_rom(132, 4, 21600, 65446, 256, 0, 0, 0, 2); // f4
  _set_fx_rom(133, 3, 0, 128, 512, 0, 0, 0, 0);
  _set_fx_rom(134, 3, 65280, 65408, 512, 0, 0, 0, 0);
}

int _distorter(int y, int t, DistCfg* dist_cfg) {
  float C1 = _d_c1;
  float C2 = _d_c2;
  float C3 = _d_c3;
  
  int distortEffect = dist_cfg.type;
  float ampl = dist_cfg.ampl; 
  float ampl_accel = dist_cfg.ampl_accel; 
  float s_freq = dist_cfg.s_freq;
  float s_freq_accel = dist_cfg.s_freq_accel;
  float compr = dist_cfg.compr;
  float compr_accel = dist_cfg.compr_accel;
  float speed = dist_cfg.speed;
  
  float ft = IntToFloat(t);
  float fy = IntToFloat(y);


  // Compute "current" values of amplitude, frequency, and compression
  float amplitude = (ampl + ampl_accel * ft * 2.0);
  float frequency = (s_freq + s_freq_accel * ft * 2.0);
  float compression = (compr + compr_accel * ft * 2.0);

  String str_kangle = String.Format(D_FORMAT_FIX, (C2 * frequency * fy + C3 * speed * ft));
  float kangle = str_kangle.AsFloat;


  // Compute the value of the sinusoidal line offset function
  int S = FloatToInt(C1 * amplitude * Maths.Sin(kangle));
  
  if(distortEffect == 4) {
    distortEffect = FloatToInt(4.0+4.0*Maths.Sin(IntToFloat(t%64)/32.0))%3 + 1;
  }

  if (distortEffect == 1) {
    return S;
  } else if (distortEffect == 2) {
    if((y % 2) == 0) {
      return -S;
    } else {
      return S;
    }
  } else if (distortEffect == 3) {
      int L = FloatToInt(fy * (1.0 + compression / 256.0) + IntToFloat(S), eRoundDown) % 256;
      if (L < 0) L = 256 + L;
      if (L > 255) L = 256 - L;

      return L;
  }

  return 0;
}

void _compute_frame(DrawingSurface* dst, DrawingSurface* src, int letterbox, int ticks, DistCfg* dist_cfg, int tile_w, int tile_h) {
  int w = dst.Width - tile_w +2;
  int h = dst.Height - tile_h +2;
  int S, L;
  int distortEffect = dist_cfg.type;
  
  if(distortEffect == 4) {
    distortEffect = (ticks/2)%3 + 1;
  }
  
  for (int y = 0; y < h; y+= tile_h) {
    S = _distorter(y, ticks, dist_cfg);
    L = y;  
    
    if (distortEffect == 3) {
      L = S;
    }
     
    if (y < letterbox || y > w - letterbox) {
      continue;
    }
    
    for (int x = 0; x < w; x+= tile_w) {
      int dx = x;
      
      if (distortEffect == 1 || distortEffect == 2) {
        dx = (x + S) % 256;
        if (dx < 0) dx = 256 + dx;
        if (dx > 255) dx = 256 - dx;
      }
      
      dst.DrawSurface(src, 0, x, y, tile_w, tile_h, dx, L, tile_w, tile_h);
      
      //dst.DrawingColor = src.GetPixel(dx, L);      
      //dst.DrawPixel(x, y);      
    }    
  }
}

void DistFX::Update(int effect, DrawingSurface* source, DrawingSurface* dest)
{
  if(effect != this._prev_fx) this._ticks = 0;
  
  if(this.TileWidth <= 0) { this.TileWidth = 64; }
  if(this.TileHeight <= 0) { this.TileHeight = 2; }
   
  _compute_frame(dest, source, 0, this._ticks, _fx_rom[effect], this.TileWidth, this.TileHeight);
  
  this._ticks++;  
  this._prev_fx = effect;
}